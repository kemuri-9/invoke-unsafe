/**
 * Copyright 2022 Steven Walters
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'biz.aQute.bnd.builder' version '6.0.0'
}

group = 'net.kemuri9'
version = '1.0.0'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main.resources {
        srcDir file('.') include 'LICENSE'
        include 'META-INF/services/**'
    }
}

java {
    withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion = JavaLanguageVersion.of(9)
}

license {
    strictCheck true
    header project.file('LICENSEHEADER')
    mapping('GetFullAccess', 'SCRIPT_STYLE')
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.deprecation = true
    if (!options.compilerArgs.find{ it.startsWith('-Xlint') }) {
        options.compilerArgs << '-Xlint:all'
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    defaultCharacterEncoding = 'UTF-8'
}

dependencies {
    implementation 'net.kemuri9:invoke:1.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

test {
    // give tests the accesses needed for verifications
    jvmArgs(['--add-opens', 'java.base/java.lang.invoke=net.kemuri9.invoke.unsafe.test'])
}

(10..17).each{ verNum ->
    Test java9Test = project.tasks.test
    task "java${verNum}Test"(type: Test) {
        dependsOn jar
        dependsOn testClasses
        description = "Runs the unit tests for java ${verNum}."
        group = JavaBasePlugin.VERIFICATION_GROUP
        javaLauncher = javaToolchains.launcherFor{ l -> l.languageVersion = JavaLanguageVersion.of(verNum) }
        // copy over appropriate details
        project.afterEvaluate {
            testClassesDirs = java9Test.testClassesDirs
            classpath = java9Test.classpath
            jvmArgs(java9Test.jvmArgs)
        }
    }
    check.dependsOn "java${verNum}Test"
}

(9..17).each{ verNum ->
    Test java9Test = project.tasks.test
    task "java${verNum}TestClasspath"(type: Test) {
        dependsOn jar
        dependsOn testClasses
        description = "Runs the unit tests for java ${verNum} in Classpath mode."
        group = JavaBasePlugin.VERIFICATION_GROUP
        javaLauncher = javaToolchains.launcherFor{ l -> l.languageVersion = JavaLanguageVersion.of(verNum) }
        modularity.inferModulePath = false
        // copy over appropriate details
        project.afterEvaluate {
            testClassesDirs = java9Test.testClassesDirs
            classpath = java9Test.classpath
            jvmArgs(['--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED'])
        }
    }
    check.dependsOn "java${verNum}TestClasspath"
}

configurations {
    sourcesElements.attributes {
        attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 9
    }
    javadocElements.attributes {
        attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 9
    }
}

// include links to oracle javadocs in generated javadoc 9
javadoc {
    options.showFromProtected().addBooleanOption('html5', true)
    // include links to oracle javadocs in generated javadoc
    options.links 'https://docs.oracle.com/javase/9/docs/api/'
}

jar {
    manifest {
        attributes('-exportcontents': 'net.kemuri9.invoke.unsafe.*',
            'Bundle-Name': 'kemuri9 Invoke Unsafe',
            'Bundle-SymbolicName': 'kemuri9-invoke-unsafe',
            'Bundle-DocURL': 'https://github.com/kemuri-9/invoke-unsafe'
            )
    }
}

jacocoTestReport {
    dependsOn check // tests are required to run before generating the report
}
// replace the code coverage so that it can depend on check
project.tasks.replace('jacocoTestCoverageVerification', JacocoCoverageVerification).configure {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
    dependsOn check
}
check {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification // enforce coverage checks
}

publishing {
    repositories {
        maven {
            name 'mavenCentralStaging'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
        maven {
            name 'mavenCentralSnapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

    publications {
        pluginMaven(MavenPublication) {

            from components.java
            pom {
                name = 'Invocation Unsafe'
                description = 'Access the JVM full access Lookup through Unsafe'
                url = 'https://github.com/kemuri-9/invoke-unsafe'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Steven Walters'
                        email = 'kemuri9@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/kemuri-9/invoke-unsafe.git'
                    developerConnection = 'scm:git:git://github.com/kemuri-9/invoke-unsafe.git'
                    url = 'https://github.com/kemuri-9/invoke-unsafe/tree/master'
                }
            }
        }
    }
}

// sign all the artifacts
signing {
    required { isReleaseVersion }
    useGpgCmd()
    sign publishing.publications.pluginMaven
}
